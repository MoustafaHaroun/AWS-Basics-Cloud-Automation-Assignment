Description: Elastic load balancer + CloudShirt instances

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey

Resources:
  # --- Load Balancer ---

  loadBalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: loadBalancer1
      Type: application
      Scheme: internet-facing
      Subnets:
        - !ImportValue publicSubnet1
        - !ImportValue publicSubnet2
      SecurityGroups:
        - !ImportValue securityGroupLoadBalancer1

  # --- Target Group ---

  loadBalancer1TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: loadBalancer1TargetGroup1
      Port: 5000
      Protocol: HTTP
      VpcId: !ImportValue vpc1
      TargetType: instance

  # --- Listener ---

  loadbalancer1Listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref loadBalancer1
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadBalancer1TargetGroup1

  # --- Launch Template ---

  launchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: cloudShirtLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0bdd88bd06d16ba03
        InstanceType: t3.small
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !ImportValue securityGroupInstance1
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -eux

              # Software installeren
              yum update -y
              rpm -Uvh https://packages.microsoft.com/config/centos/8/packages-microsoft-prod.rpm
              yum install -y dotnet-sdk-6.0 git amazon-efs-utils

              # EFS mounten
              mkdir -p /mnt/efs
              mount -t efs ${EFS}:/ /mnt/efs
              echo "${EFS}:/ /mnt/efs efs defaults 0 0" >> /etc/fstab
              mkdir -p /mnt/efs/logs
              chown ec2-user:ec2-user /mnt/efs/logs

              # CloudShirt ophalen
              cd /home/ec2-user
              git clone https://github.com/looking4ward/CloudShirt.git

              # Database connecties configureren
              sed -i 's|Server.*CatalogDb;|Server=${RDS},1433;User ID=csadmin;Password=cspasswd;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;|' CloudShirt/src/Web/appsettings.json
              sed -i 's|Server.*Identity;|Server=${RDS},1433;User ID=csadmin;Password=cspasswd;Initial Catalog=Microsoft.eShopOnWeb.Identity;|' CloudShirt/src/Web/appsettings.json

              # Ownership aan ec2-user geven
              chown -R ec2-user:ec2-user /home/ec2-user/CloudShirt

              # App builden als ec2-user
              su - ec2-user -c "
                export DOTNET_CLI_HOME=/home/ec2-user
                cd /home/ec2-user/CloudShirt/src/Web
                dotnet publish -c Release -o /home/ec2-user/CloudShirt/release
              "

              # Systemd service aanmaken
              cat > /etc/systemd/system/cloudshirt.service << 'EOF'
              [Unit]
              After=network.target

              [Service]
              WorkingDirectory=/home/ec2-user/CloudShirt/release
              ExecStart=/usr/bin/dotnet Web.dll --urls http://0.0.0.0:5000
              Restart=always
              User=ec2-user
              Environment=ASPNETCORE_ENVIRONMENT=Production
              StandardOutput=append:/mnt/efs/logs/cloudshirt.log
              StandardError=append:/mnt/efs/logs/cloudshirt.log

              [Install]
              WantedBy=multi-user.target
              EOF

              # Service starten
              systemctl daemon-reload
              systemctl enable cloudshirt.service
              systemctl start cloudshirt.service
            - RDS: !ImportValue rds1Endpoint
              EFS: !ImportValue efs1
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Stack
                Value: cloudshirt-elb

  # --- Auto Scaling Group ---

  autoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: autoScalingGroup1
      VPCZoneIdentifier:
        - !ImportValue publicSubnet1
        - !ImportValue publicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplate1
        Version: !GetAtt launchTemplate1.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref loadBalancer1TargetGroup1
      HealthCheckType: EC2
      Tags:
        - Key: Name
          Value: cloudshirt-elb
          PropagateAtLaunch: true

  # --- Scheduled Scaling ---

  scaleOutSchedule1:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup1
      DesiredCapacity: 3
      MinSize: 1
      MaxSize: 3
      Recurrence: "0 18 * * *" # Scale out at 6 PM ET
      TimeZone: "America/New_York"

  scaleInSchedule1:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup1
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 3
      Recurrence: "0 20 * * *" # Scale in at 8 PM ET
      TimeZone: "America/New_York"

# --- Outputs ---

Outputs:
  loadbalancer1Dns:
    Description: DNS name of the Load Balancer
    Value: !GetAtt loadBalancer1.DNSName
    Export:
      Name: loadBalancer1Dns
