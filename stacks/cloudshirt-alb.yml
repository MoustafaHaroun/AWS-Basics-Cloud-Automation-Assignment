Description: Application loadbalancer for CloudShirt

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey

Resources:

# --- Security Group ALB ---
  securityGroupLoadbalancer1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound 80 from internet
      VpcId: !ImportValue vpc1Id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Stack
          Value: cloudshirt-alb
        - Key: Name
          Value: securityGroupLoadbalancer1

# --- Security Group EC2 Instances ---
  securityGroupInstance1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound 5000 from ALB only
      VpcId: !ImportValue vpc1Id
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref securityGroupLoadbalancer1
      Tags:
        - Key: Stack
          Value: cloudshirt-alb
        - Key: Name
          Value: securityGroupInstance1

# --- Load Balancer ---
  loadbalancer1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: applicationLoadbalancer1
      Type: application
      Scheme: internet-facing
      Subnets:
        - !ImportValue publicSubnet1Id
        - !ImportValue publicSubnet2Id
      SecurityGroups:
        - !Ref securityGroupLoadbalancer1

# --- Target Group ---
  loadbalancer1TargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: loadbalancer1TargetGroup1
      Port: 5000
      Protocol: HTTP
      VpcId: !ImportValue vpc1Id
      TargetType: instance
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

# --- Listener ---
  loadbalancer1Listener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref loadbalancer1
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref loadbalancer1TargetGroup1

# --- Launch Template ---
  launchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: cloudShirtLaunchTemplate
      LaunchTemplateData:
        ImageId: ami-0e95a5e2743ec9ec9
        InstanceType: t3.small
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref securityGroupInstance1
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              # --- Update OS en dependencies ---
              yum update -y

              # --- Installeer Git en .NET 6 SDK ---
              rpm -Uvh https://packages.microsoft.com/config/centos/8/packages-microsoft-prod.rpm
              yum install -y dotnet-sdk-6.0 git

              # --- Clone CloudShirt naar de juiste map ---
              mkdir -p /home/ec2-user/CloudShirt
              cd /home/ec2-user/CloudShirt
              git clone https://github.com/looking4ward/CloudShirt.git .

              # --- Pas appsettings.json aan met RDS endpoint ---
              sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=csadmin;Password=cspasswd;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /home/ec2-user/CloudShirt/src/Web/appsettings.json
              sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=csadmin;Password=cspasswd;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /home/ec2-user/CloudShirt/src/Web/appsettings.json

              # --- Build & publish .NET Web app ---
              export DOTNET_CLI_HOME=/home/ec2-user
              export ASPNETCORE_ENVIRONMENT=Development   # <-- Add this line
              cd /home/ec2-user/CloudShirt/src/Web
              dotnet publish -c Release -o /home/ec2-user/CloudShirt/release

              # --- Start de webapp met nohup ---
              cd /home/ec2-user/CloudShirt/release
              nohup dotnet Web.dll --urls "http://0.0.0.0:5000" > web.log 2>&1 &
            - RDSENDPOINT: !ImportValue rdsEndpointAddress
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Stack
                Value: cloudshirt-alb

# --- Auto Scaling Group ---
  autoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: autoScalingGroup1
      VPCZoneIdentifier:
        - !ImportValue publicSubnet1Id
        - !ImportValue publicSubnet2Id
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplate1
        Version: !GetAtt launchTemplate1.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref loadbalancer1TargetGroup1
      HealthCheckType: EC2 
      Tags:
        - Key: Name
          Value: cloudshirt-alb
          PropagateAtLaunch: true

# --- Scheduled Scaling ---
  scaleOutSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup1
      DesiredCapacity: 3
      MinSize: 1
      MaxSize: 3
      Recurrence: "0 22 * * *"   # 22:00 UTC = 18:00 ET
      TimeZone: "UTC"

  scaleInSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref autoScalingGroup1
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 3
      Recurrence: "0 0 * * *"    # 00:00 UTC = 20:00 ET previous day
      TimeZone: "UTC"
